\documentclass[a4paper,11pt,twoside]{article} % type et caractéristique du document
\usepackage[utf8]{inputenc} % encodage (attention: adapter les options de TeXmaker)
\usepackage[T1]{fontenc} % encodage des polices
\usepackage[numbers]{natbib} % pour avoir des references style Plos

\usepackage[french]{babel} % 
\usepackage[hmargin=2.5cm,vmargin=3cm]{geometry} % marges du document
\usepackage{graphicx} % package pour inserer des images
%\graphicspath{{logo/}} 
\usepackage{multirow} % package permettant la fusion des lignes dans un tableau
\usepackage{pdfpages}
\usepackage[pdftex]{hyperref}

\hypersetup{
	unicode=false, % non-Latin characters bookmarks
	pdftoolbar=false, % show Acrobat's toolbar?
	pdfmenubar=false, % show Acrobat's menu?
	pdffitwindow=true, % page fit to window when opened
	pdftitle={Formation R}, % title
	pdfauthor={Bessonneau}, % author
	pdfsubject={s'entraîner avec R}, % subject of the document
	pdfnewwindow=true, % links in new window
	colorlinks=true, % false: boxed links; true: colored links
	linkcolor=blue, % color of internal links
	citecolor=red, % color of links to bibliography
	filecolor=magenta, % color of file links
	urlcolor=blue % color of external links
}


\usepackage{tocbibind} % pour que les differentes tables apparaissent 
\usepackage{makeidx}
\usepackage{gensymb} 

\usepackage{verbatim}

\newcommand{\R}{\includegraphics[scale=0.1]{Rlogo}}

\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}

\title{\Huge{Il faut s'ent\R aîne\R...}\\ \large{Importation}}

\date{juin 2015}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<intro,echo=F>>=
require(MASS,quietly=T,warn.conflicts=FALSE)
require(xtable,quietly=T,warn.conflicts=FALSE)
require(stringr,quietly=T,warn.conflicts=FALSE)
require(questionr,quietly=T,warn.conflicts=FALSE)
require(plyr,quietly=T,warn.conflicts=FALSE)

opts_chunk$set(fig.path='Graphiques/',fig.align='center',fig.show='hold',size='footnotesize',
               fig.height=7,fig.width=7,out.width="\\textwidth",resize.height="0.8\\textheight",
               
# dé-commenter pour obtenir le document sans les solutions et les sorties               
              eval=FALSE,
      
              echo=TRUE,

               tidy=TRUE,prompt=TRUE

               )

options(width=45)

correction <- FALSE
@


\begin{document}

\maketitle

\section{Fichiers texte}

  Basique mais indispensable, le changement de répertoire de travail.

  \begin{enumerate}
    \item utilisez l’interface graphique pour changer le répertoire courant
    \item vérifiez le répertoire courant dans le terminal
    \item utilisez le terminal pour changer le répertoire courant et vérifiez
  \end{enumerate}
  
  Sur le fichier texte, on va travailler sur la data.frame des Iris de Fisher. Ce fichier est très bien connu de tous les statisticiens car pris en exemple pour les analyses factorielles et les analyses discriminantes. 
  
  Le fichier est assez simple et le data.frame existe en mémoire. Vous pourrez comparer l'importation avec le data.frame stocké dans la collection d'examples de R.
  
  Pour récupérer une data.frame \emph{exemple}, il faut taper~:
  
<<IrisDataLoad,echo=correction,eval=FALSE>>=
data(iris)
@

  \begin{enumerate}
	\item Regarder le fichier avec un éditeur de texte (utilisez NotePad++, clic-droit sur le fichier)
	\item Une fois répérer les caractéristiques du fichier~: séparateur de décimales, séparateurs de champ, ...
	\item Choisir la bonne fonction et les bonnes options pour R.
\end{enumerate}

  Lors de l'importation, essayer d'importer en transformant les variables caractère tantôt en \emph{character} tantôt en \emph{factor}.

  \begin{enumerate}
    \item Iris.csv
    
<<IrisLoad1,echo=correction>>=

# --- C'est le format par défaut pour un fichier Excel ("Français") -------

csv_iris <- read.table(
	"data/iris.csv",
	header=T,		# En-tête de colonne	
	sep=";",		# Séparateur de champs = ;
	dec=","			# Séparateur de décimal = ,
)
str(csv_iris)
# ou strictement équivalent
csv_iris <- read.csv2("data/Iris.csv")      
str(csv_iris)
@
    
    \item Iris.txt
    
<<IrisLoad2,echo=correction>>=

# --- Format "tabulation" -------------------------------------------------

# Si on regarde le format, le séparateur de champ est un \t (tabulation) et le séparateur de 
# décimal est ",". Il y a en première ligne des en-têtes de colonne...

table_iris <- read.table(
	"data/Iris.txt",
	header=T,		# En-tête de colonne	
	sep="\t",		# Séparateur de champs = ;
	dec=","			# Séparateur de décimal = ,
)
str(table_iris)
# ou strictement équivalent
table_iris <- read.delim("data/Iris.txt",stringsAsFactors = F)
str(table_iris)
@
    
  \end{enumerate}


  Maintenant même exercice sur les deux fichiers~:
  \begin{enumerate}
    \item patient.dat

<<patientLoad1,echo=correction>>=

# --- Format question ouverte ---------------------------------------------

# Si on regarde le format, le séparateur de champ est un "|" et le séparateur de 
# décimal est ".". Il y a en première ligne des en-têtes de colonne... C'est un format qu'on peut
# rencontrer quand on travaille avec bases SQL où des champs sont susceptibles de contenir des ","
# ou des ";". C'est par exemple le cas pour des sondages avec des questions ouvertes ou des 
# libelés de formation.

dat_patient <- read.table(
	"data/patient.dat",
	header=T,		# En-tête de colonne	
	sep="|",		# Séparateur de champs = ;
	dec="."			# Séparateur de décimal = ,
)
str(dat_patient)
@

    \item patient.csv
    
<<patientLoad2,echo=correction>>=

# --- C'est le format de sortie de SAS par défaut pour un fichier CSV -----
csv_patient <- read.table(
	"data/patient.csv",
	header=T,		# En-tête de colonne	
	sep=",",		# Séparateur de champs = ;
	dec="."			# Séparateur de décimal = ,
)
# ou équivalent
csv_patient <- read.csv("data/patient.csv",stringsAsFactors = F)
str(csv_patient)
@    
    
    
    \item pour des raisons de traitement de données, importer les \emph{ACP},	\emph{peridurale} et   \emph{periACP} sous forme \emph{character} et non \emph{numeric/integer}.

<<patientLoad3,echo=correction>>=

# --- Modification des types de colonne -----------------------------------

# on charge quelques quelques lignes
csv_patient <- read.csv("data/patient.csv",stringsAsFactors = F,nrows=20)
dim(csv_patient)
str(csv_patient)

# on récupère le type des variables et on modifie pour les trois demandées
types <- sapply(csv_patient,class)
types[c("ACP","peridurale","periACP")] <- "character"

# on charge le fichier avec les bons types de données
csv_patient <- read.csv("data/patient.csv",stringsAsFactors = F,colClasses=types[-1])
str(csv_patient)
@

  \end{enumerate}
  
\subsection{Exportation}    

  Le but est d'exporter le data.frame mtcars dans les data.frame exemples~:
  \begin{enumerate}
    \item pour Excel
    
<<ExportExcel,eval=FALSE,echo=correction>>=
write.csv2(mtcars,"data/mtcars-excel.csv")
@
    
    \item pour SAS (sans les row.names)
  
<<ExportSAS,eval=FALSE,echo=correction>>=
write.csv(mtcars,"data/mtcars-sas.csv",row.names = F)
@

  \end{enumerate}  
  
  
\section{Format SPSS}

  Il faudra~: 
  \begin{enumerate}
    \item charger le paquet foreign
    \item utiliser la bonne commande pour charger le paquet SPSS
  \end{enumerate}

<<PatientSPSS,echo=correction>>=

# Le fichier iris.sav est un fichier SPSS, il nécessite le package foreign...
require(foreign)
iris <- read.spss("data/iris.sav")

# On obtient pas une data.frame mais une liste. Parce que la fonction tente de charger les attributs
# et formats de SPSS. 
class(iris)

str(iris)

# On voit ici qu'il n'y a pas de structures très complexes. Ce sont juste des vecteurs. Aussi R va
# pouvoir tout seul convertir la list en data.frame...
iris <- as.data.frame(iris)
str(iris)

# Seul problème c'est qu'en réduisant en data.frame, on perd les libellés de SPSS notamment

@

\section{Importation de fichier Excel}

Dans cette partie, on utilise \emph{XLConnect} pour importer un fichier Excel.

Les \href{http://www.inside-r.org/packages/cran/AER/docs/TeachingRatings}{données} sont les appréciations d'enseignants par des élèves d'un collège américain.

Il est au format Excel 2010.

\begin{enumerate}
  \item charger le fichier

<<ExcelTeacher1,eval=FALSE,echo=correction>>=

# Ouverture de la connexion
wb1 <- loadWorkbook(          
  "data/Teacher.xlsx", 
  create = FALSE
)

# Chargement 
teachers <- readWorksheet( wb1, sheet = "Teacher")

@  
  
  \item Tranformer le fichier "xslx" en fichier Excel 2003
  
<<ExcelTeacher2,eval=FALSE,echo=correction>>=

# Ouverture de la connexion
wb2 <- loadWorkbook(          
  "data/Teacher.xls", 
  create = TRUE
)

# Préparation de la feuille
createSheet(wb, name = "Teacher")

# Ecriture dans la feuille
writeWorksheet( wb2, teachers, sheet = "Teacher")

saveWorkbook(wb2,"data/Teacher.xls")

@  

  \item Charger correctement le patient.xlsx en évitant d'importer les descriptions des variables
  
<<ExcelPatient,echo=correction>>=

# Ouverture de la connexion
wbPatient <- loadWorkbook(          
  "data/patient.xlsx", 
  create = FALSE
)

patient <- readWorksheet( wbPatient, sheet = "Patients", startRow = 4, endCol = 17 )

@
  
  \end{enumerate}

\section{En supplément\dots}

\begin{enumerate}
  \item Il faut charger le fichier texte avec un format fixe \emph{Iris-fixed.txt}

<<ChargementFichierFixe,echo=correction>>=

# --- Lecture de fichiers à positions fixes -------------------------------

# C'est le royaume de read.fwf

# On va repartir de notre bon vieux fichier iris...
# Examiner le fichier Iris...
# En fait les longueurs de colonnes sont c( 5, 5, 5, 5, 15)
# Mais n'oubliez pas que la première colonne qui contient les titres est lu différement, avec un 
# séparateur... Ici c'est un ";"
fixed_iris <- read.fwf(
	"data/Iris-fixed.txt",
	width = c( 5, 5, 5, 5, 15),
	header=T,
	sep=";",
	strip.white=TRUE
)

@


  \item Importation des données ESLC depuis une base SQLite. Pour des questions de taille, faites une requête SQL pour n'importer que les données pour la France (condition 1). Puis importer les données pour les élèves français qui ont passé l'anglais (condition 1 et 2)
  
<<SQL,eval=FALSE,echo=TRUE>>=
# 1) country_id = \"FR\"

# 2) targetLanguage_id=\"EN\"
@
  
<<SQLite,echo=correction>>=
# Base de données #################################################################################

# Script de création de la base
# db <- dbConnect(SQLite(), dbname = "stu.sqlite")
# (dbWriteTable( db, "stu", stu))
# dbDisconnect(db)

require(RSQLite)

# Ouverture de la connexion
db <- dbConnect(SQLite(), dbname = "stu.sqlite")

# Notre requete, que la France
requete <- "SELECT * FROM stu WHERE country_id = \"FR\";"	
res <- dbSendQuery( db, requete)
fr <- fetch( res, n = -1 )
dbClearResult(res)					# Vider le tampon

# Changement de type de variables à cause des fonctionnalités 
# du pilote SQLite (factors->character)
str(fr)		

# Vérification qu'on a bien pris la France
table(fr$country_id)

# Pour ceux qui ont passé l'anglais... Attention on utilise la MEME connexion <db> qui a été déjà créée !
requete <- "SELECT * FROM stu WHERE country_id = \"FR\" and targetLanguage_id=\"EN\"";
res <- dbSendQuery( db, requete)
fren <- fetch( res, n = -1 )
dbClearResult(res)					# Vider le tampon

# Et voilà... Pour le fun, l'opération qui permet de télécharger toute la base en mémoire...
s=dbReadTable(db,"stu")

# Enfin on est civilisé donc on ferme la connexion de la base !
dbDisconnect(db)
@

  \item insérer une nouvelle table dans la base de données SQLite avec seulement les données pour les élèves français. Le nom de la table sera "fr"

<<EcritureSQLite,eval=FALSE,echo=correction>>=

# initialisation de la connexion.
db <- dbConnect(SQLite(), dbname = "data/stu.sqlite")

# écriture de la table, on supprime les row.names
dbWriteTable( db, "fr", fr, row.names=F)

# Commande RSQLite pour avoir la liste des tables dans la base de données
dbListTables( db )

# On ferme TOUJOURS la connexion
dbDisconnect(db)

@

\end{enumerate}


\end{document}